install.pakcages("doBy")
install.packages("doBy")
install.packages("sqldf")
install.packages("doMc")
install.packages("doMC")
install.packages("fpc")
install.packages("arules")
install.packages("arulesViz")
library(arules)
rules <- apriori(titanic.raw, control=list(verbose=F),
parameter=list(minlen=2, supp=0.005, conf=0.8),
appearance=list(rhs=c("Survived=No", "Survived=Yes"), default="lhs"))
# sort rules
quality(rules) <- round(quality(rules), digits=3)
rules.sorted <- sort(rules, by="lift")
load("~/Downloads/titanic.raw.rdata")
dim(titanic.raw)
idx <- sample(1:nrow(titanic.raw), 8)
titanic.raw[idx, ]
install.packages("twitteR")
library(twitteR)
consumerKey <- "eFI66E3LDy5cx7nBWp84U8nGm"
consumerSecret <- "NixyGdziXEw5oCOp3qiCHa7Ru6pQKxFOBUYh27mBR8veCnTZ60"
library(twitteR)
consumerKey <- "YOUR API key"
consumerSecret <- "API secret"
credential <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL="https://api.twitter.com/oauth/request_token",
accessURL="https://api.twitter.com/oauth/access_token",
authURL="https://api.twitter.com/oauth/authorize")
download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
library(twitteR)
credential$handshake(cainfo="cacert.pem")
credential$handshake(cainfo="cacert.pem")
library(twitteR)
library(twitteR)
consumerKey <- "eFI66E3LDy5cx7nBWp84U8nGm"
consumerSecret <- "NixyGdziXEw5oCOp3qiCHa7Ru6pQKxFOBUYh27mBR8veCnTZ60"
credential <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL="https://api.twitter.com/oauth/request_token",
accessURL="https://api.twitter.com/oauth/access_token",
authURL="https://api.twitter.com/oauth/authorize")
download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
library(twitteR)
credential$handshake(cainfo="cacert.pem")
registerTwitterOAuth(credential)
save(credential, consumerKey, consumerSecret, file="/Users/jang/Dropbox/OJT/R/Data/credential_ojt.RData")
library(twitteR)
load("~/Dropbox/OJT/R/Data/credential_ojt.RData")
registerTwitterOAuth(credential)
result <- searchTwitter("교통연구원", since='2014-01-01', until='2014-04-26', n=1000)
result[1:3]
install.packages("tm")
install.packages("wordcloud")
install.packages(DAAG)
install.packages("DAAG")
available.packages
length(available.packages())
?available.packages
dim(available.packages())
OAuthid <- "547957637370726f3539444d526350"
doc3 <- xmlTreeParse(paste("http://openapi.seoul.go.kr:8088/", OAuthid, "/xml/CardBusStatisticsService/1/200/201402/5516/", sep""))
doc3 <- xmlTreeParse(paste("http://openapi.seoul.go.kr:8088/", OAuthid, "/xml/CardBusStatisticsService/1/200/201402/5516/", sep=""))
paste("http://openapi.seoul.go.kr:8088/", OAuthid, "/xml/CardBusStatisticsService/1/200/201402/5516/", sep="")
library
library(XML)
))
library(XML)
# OAuthid <- "Your OAuthid"
doc3 <- xmlTreeParse(paste("http://openapi.seoul.go.kr:8088/", OAuthid, "/xml/CardBusStatisticsService/1/200/201402/5516/", sep=""))
install.packages("SnowballC")
install.packages("topicmodels")
install.packages("topicmodels")
library(wordcloud)
?wordcloud
library(twitteR)
consumerKey <- "eFI66E3LDy5cx7nBWp84U8nGm"
consumerSecret <- "NixyGdziXEw5oCOp3qiCHa7Ru6pQKxFOBUYh27mBR8veCnTZ60"
credential <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL="https://api.twitter.com/oauth/request_token",
accessURL="https://api.twitter.com/oauth/access_token",
authURL="https://api.twitter.com/oauth/authorize")
download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
library(twitteR)
credential$handshake(cainfo="cacert.pem")
save(credential, consumerKey, consumerSecret, file="/Users/jang/Dropbox/OJT/R/Data/credential_ojt.RData")
sessionInfo()
library(rgdal)
setwd("~/Dropbox/CensusSHP/")
ogrListLayers(dsn="2307060.kml") # to find the layer name
spa1 <- readOGR(dsn="2307060.kml", layer=2307060.kml")
spa1 <- readOGR(dsn="2307060.kml", layer="2307060.kml")
spa1 <- readOGR(dsn="2307060.kml", layer="Layer #0")
spa1 <- readOGR(dsn="2307060.kml", layer="2307060020013")
?readOGR
spa1 <- readOGR(dsn="2307060.kml", layer="2307060020013",encoding="UTF-8")
spa1 <- readOGR(dsn="2307060.kml", layer="Layer #0",encoding="UTF-8")
spa1 <- readOGR(dsn="2307060.kml", layer="Layer #1",encoding="UTF-8")
spa1 <- readOGR(dsn="2307060.kml", layer="Layer #0",encoding="UTF-8")
ogrInfo(dsn="2307060.kml", layer="Layer #0")
ogrInfo
library(maptools)
install.packages(rgeos)
install.packages("rgeos")
library(maptools)
ogrInfo(dsn="2307060.kml", layer="Layer #0")
debugonce(ogrInfo)
ogrInfo(dsn="2307060.kml", layer="Layer #0")
ogrinfo
eTypes
null_geometries
u_eType
u_with_z
u_with_z
debugonce(ogrInfo)
ogrInfo(dsn="2307060.kml", layer="Layer #0")
debugonce(ogrInfo)
ogrInfo(dsn="2307060.kml", layer="Layer #0")
u_eType
u_with_z
length(u_eType)
names(ogrinfo) <- c("nrows", "nitems", "iteminfo", "driver",
"extent")
ogrinfo$driver
names(ogrinfo$iteminfo) <- c("name", "type", "length", "typeName")
if (use_iconv && !is.null(encoding))
ogrinfo$iteminfo$name <- iconv(ogrinfo$iteminfo$name,
from = encoding)
ogrinfo$eType <- u_eType
ogrinfo$with_z <- u_with_z
ogrinfo$null_geometries <- null_geometries
ogrinfo$deleted_geometries <- deleted_geometries
ogrinfo$dsn <- dsn
ogrinfo$layer <- layer
ogrinfo$p4s <- OGRSpatialRef(dsn, layer)
class(ogrinfo) <- "ogrinfo"
ogrinfo
plot(ogrinfo)
a <<- ogrinfo
a
a[[]]
a[[1]]
a[[]]
a[[2]]
a[[3]]
a[[4]]
a[[5]]
a[[6]]
a[[7]]
a[[8]]
a[[9]]
a[[10]]
a[[11]]
str(a)
a[[1]]
sp1 <- a
summary(spa1)
spa1 <- a
summary(spa1)
o0 <- coordinates(spa1)
getKMLcoordinates_01 <- function (kmlfile, ignoreAltitude = FALSE)
{
if (missing(kmlfile))
stop("kmlfile is missing")
kml <- paste(readLines(kmlfile, encoding = "UTF-8"), collapse = " ")
re <- "<coordinates> *([^<]+?) *<\\/coordinates>"
## ++ new code
## remove tabs first
kml <- gsub("\\t", "", kml)
##
mtchs <- gregexpr(re, kml)[[1]]
coords <- list()
for (i in 1:(length(mtchs))) {
kmlCoords <- unlist(strsplit(gsub(re, "\\1", substr(kml,
mtchs[i], (mtchs[i] + attr(mtchs, "match.length")[i])),
perl = TRUE), split = " "))
m <- t(as.matrix(sapply(kmlCoords, function(x) as.numeric(unlist(strsplit(x,
","))), USE.NAMES = FALSE)))
if (!ignoreAltitude && dim(m)[2] != 3)
message(paste("no altitude values for KML object",
i))
coords <- append(coords, ifelse(ignoreAltitude, list(m[,
1:2]), list(m)))
}
coords
}
spa <- getKMLcoordinates_01("2307060.kml")
summary(spa)
spa
length(spa)
lapply(spa,function(x) c(range(x[,1], range(x[,2]))))
matrix(unlist(lapply(spa,function(x) c(range(x[,1], range(x[,2]))))), byrow=T, ncol=2)
plot(matrix(unlist(lapply(spa,function(x) c(range(x[,1], range(x[,2]))))), byrow=T, ncol=2))
plot(matrix(unlist(lapply(spa,function(x) c(range(x[,1], range(x[,2]))))), byrow=T, ncol=2), type="n")
plot(matrix(unlist(lapply(spa,function(x) c(range(x[,1], range(x[,2]))))), byrow=T, ncol=2), type="n", xlab="", ylab="")
lapply(spa, function(x) lines(x[,1], x[,2]))
lapply(spa, function(x) lines(x[,1], x[,2]))
spa[[1]]
lines(spa[[1]][,1:2])
lines(spa[[1]][,1:2], col=2)
matrix(unlist(lapply(spa,function(x) c(range(x[,1], range(x[,2]))))), byrow=T, ncol=2)
spa[[`]]
spa[[1]]
spa[[3]]
spa[[10]]
matrix(unlist(lapply(spa,function(x) c(range(x[,2], range(x[,1]))))), byrow=T, ncol=2)
matrix(unlist(lapply(spa,function(x) cbind(range(x[,2], range(x[,1]))))), byrow=T, ncol=2)
plot(matrix(unlist(lapply(spa,function(x) c(range(x[,1], range(x[,2]))))), byrow=T, ncol=2)[,2:1], type="n", xlab="", ylab="")
lapply(spa, function(x) lines(x[,1], x[,2]))
lapply(spa, function(x) lines(x[,1], x[,2]))
lapply(spa, function(x) polygon(x[,1], x[,2], col=2))
